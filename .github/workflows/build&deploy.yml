name: build&deploy

on:
  push:
    branches:
      - main 

jobs:
  CI:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.18

    - name: Build
      run: |
        go build -o app .

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1



    - name: Docker Build and Push DockerHub
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        docker build -t apijogos .
        echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
        docker tag apijogos:latest $DOCKER_USERNAME/apijogos:latest
        docker push $DOCKER_USERNAME/apijogos:latest

    - name: Login to Amazon ECR
      id: login-ecr-private
      uses: aws-actions/amazon-ecr-login@v1
      with:
        mask-password: 'true'
        registry-type: private

    - name: Docker Build and Push ECR
      env: 
        REGISTRY: ${{ steps.login-ecr-private.outputs.registry }}
        REPOSITORY: apijogos
        IMAGE_TAG: latest
      run: |
        docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
        docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

  CD:
    needs: CI
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}  

    - name: Update ECS Service
      run: |
        aws ecs update-service \
          --cluster  ${{ secrets.AWS_ECS_CLUSTER }}\
          --service ${{ secrets.AWS_ECS_SERVICE }} \
          --force-new-deployment
